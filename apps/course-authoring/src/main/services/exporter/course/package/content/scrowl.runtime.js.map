{"mappings":"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","sources":["packages/runtime/src/runtime.ts","packages/runtime/src/index.ts"],"sourcesContent":["/*\n  SCORM API REF\n  https://scorm.com/scorm-explained/technical-scorm/run-time/run-time-reference/\n*/\nimport { RUNTIME_SERVICE } from \"./types\";\n\nconst hasProp = (obj: {}, prop: string) => {\n  return Object.prototype.hasOwnProperty.call(obj, prop);\n};\n\nexport const service: RUNTIME_SERVICE = {\n  init: false,\n  finished: false,\n  _time: {\n    start: undefined,\n    end: undefined,\n    convert: (total) => {\n      function ZeroPad(val:number, pad:number) {\n        let res = new String(val);\n        const len = res.length;\n\n        if (len > pad) {\n          return res.substr(0, pad);\n        }\n\n        for (let i = len; i < pad; i++) {\n          res = '0' + res;\n        }\n\n        return res;\n      }\n\n      let totalMs = total % 1000;\n      let totalS = ((total - totalMs) / 1000) % 60;\n      let totalM = ((total - totalMs - totalS * 1000) / 60000) % 60;\n      let totalH = (total - totalMs - totalS * 1000 - totalM * 60000) / 3600000;\n\n      if (totalH == 10000) {\n        totalH = 9999;\n        totalM = (total - totalH * 3600000) / 60000;\n\n        if (totalM == 100) {\n          totalM = 99;\n        }\n\n        totalM = Math.floor(totalM);\n        totalS = (total - totalH * 3600000 - totalM * 60000) / 1000;\n\n        if (totalS == 100) {\n          totalS = 99;\n        }\n\n        totalS = Math.floor(totalS);\n        totalMs = total - totalH * 3600000 - totalM * 60000 - totalS * 1000;\n      }\n\n      let timespan =\n        ZeroPad(totalH, 4) +\n        ':' +\n        ZeroPad(totalM, 2) +\n        ':' +\n        ZeroPad(totalS, 2);\n\n      if (totalH > 9999) {\n        timespan = '9999:99:99';\n      }\n\n      return timespan;\n    },\n  },\n  STATUSES: {\n    update: {\n      true: 'true',\n      false: 'false',\n    },\n    lesson: {\n      success: 'passed',\n      failed: 'failed',\n      done: 'completed',\n      active: 'incomplete',\n      viewed: 'browsed',\n      unseen: 'not attempted',\n    },\n    exit: {\n      timeout: 'time-out',\n      save: 'suspend',\n      logout: 'logout',\n    },\n  },\n  isAvailable: () => {\n    const isReady = (service.init && !service.finished);\n\n    if (!isReady || !service.API) {\n      return {\n        error: true,\n        message: 'Service is unavailable'\n      }\n    }\n\n    return {\n      error: false,\n      API: service.API,\n    }\n  },\n  getError: (printError) => {\n    printError = printError === undefined || printError === null ? true : printError;\n    const res = service.isAvailable();\n\n    if (res.error) {\n      return res;\n    }\n\n    const errorId = res.API.LMSGetLastError();\n    const errorMsg = res.API.LMSGetErrorString(errorId);\n    const errorStack = res.API.LMSGetDiagnostic(errorId);\n    const apiError = {\n      id: errorId,\n      message: errorMsg,\n      stack: errorStack,\n    };\n\n    if (printError) {\n      console.error(`Error:\\n${JSON.stringify(apiError, null, 2)}`);\n    }\n\n    return {\n      error: false,\n      data: apiError,\n    };\n  },\n  _findAPI: (source) => {\n    let retryCnt = 0;\n    const retryLimit = 7;\n\n    if (source.API) {\n      return {\n        error: false,\n        API: source.API,\n      }\n    }\n\n    if (source.parent === source) {\n      return {\n        error: true,\n        message: 'Error: unable to find API - top level reached'\n      }\n    }\n\n    while (\n      source.API == null &&\n      source.parent != null &&\n      retryCnt < retryLimit\n    ) {\n      retryCnt++;\n      source = source.parent;\n    }\n    \n    if (retryCnt >= retryLimit) {\n      return {\n        error: true,\n        message: 'Error: unable to find API - nested to deep'\n      }\n    }\n    console.log('findAPI', retryCnt, retryLimit);\n    return {\n      error: false,\n      API: source.API,\n    };\n  },\n  start: () => {\n    const resFind = service._findAPI(window);\n    console.log('find res', resFind);\n    if (resFind.error) {\n      return resFind;\n    }\n    console.log('result', resFind);\n    service.API = resFind.API;\n    service._time.start = new Date();\n    service.init = true;\n    console.log('service', service);\n    const resInit = service.API.LMSInitialize();\n\n    if (resInit === service.STATUSES.update.false) {\n      return {\n        error: true,\n        message: 'SCORM service failed to initialize',\n        data: service.getError(),\n      }\n    }\n\n    return {\n      error: false,\n    }\n  },\n  save: () => {\n    const res = service.isAvailable();\n\n    if (res.error) {\n      return res;\n    }\n\n    const resSave = res.API.LMSCommit();\n\n    if (resSave === service.STATUSES.update.false) {\n      return {\n        error: true,\n        message: 'SCORM service failed to save',\n        data: service.getError(),\n      }\n    }\n\n    return {\n      error: false,\n    }\n  },\n  stop: () => {\n    const res = service.isAvailable();\n\n    if (res.error) {\n      return res;\n    }\n\n    const saveRes = service.save();\n\n    if (saveRes.error) {\n      return saveRes;\n    }\n\n    const resFinish = res.API.LMSFinish();\n\n    if (resFinish === service.STATUSES.update.false) {\n      return {\n        error: true,\n        message: 'SCORM service failed to save',\n        data: service.getError(),\n      }\n    }\n\n    service.finished = true;\n    return {\n      error: false,\n    };\n  },\n  setValue: (elem, val) => {\n    const res = service.isAvailable();\n\n    if (res.error) {\n      return res;\n    }\n\n    const setRes = res.API.LMSSetValue(elem, val);\n\n    if (setRes === service.STATUSES.update.false) {\n      return {\n        error: true,\n        message: `SCORM service failed to set ${elem} to ${val}`,\n        data: service.getError(true),\n      }\n    }\n\n    return {\n      error: false,\n    };\n  },\n  getValue: elem => {\n    const res = service.isAvailable();\n\n    if (res.error) {\n      return res;\n    }\n\n    const getRes = res.API.LMSGetValue(elem);\n\n    if (getRes === service.STATUSES.update.false) {\n      return {\n        error: true,\n        message: `SCORM service failed to get ${elem}`,\n        data: service.getError(true),\n      }\n    }\n\n    return {\n      error: false,\n    };\n  },\n  updateStatus: status => {\n    const res = service.isAvailable();\n\n    if (res.error) {\n      return res;\n    }\n\n    if (!hasProp(service.STATUSES.lesson, status)) {\n      const validStatuses = Object.keys(service.STATUSES.lesson).join(', ');\n      const msg = `Invalid lesson status: ${status}. Must be one of: ${validStatuses}`;\n\n      console.error(msg);\n      return {\n        error: true,\n        message: msg,\n      }\n    }\n\n    const lessonStatus = service.STATUSES.lesson[status];\n    const setRes = service.setValue('cmi.core.lesson_status', lessonStatus);\n\n    if (setRes.error) {\n      return setRes;\n    }\n\n    return {\n      error: false,\n    };\n  },\n  exit: () => {\n    const res = service.isAvailable();\n\n    if (res.error) {\n      return res;\n    }\n\n    service._time.end = new Date();\n\n    if (!service._time.start) {\n      return {\n        error: true,\n        message: 'Service was never started'\n      }\n    }\n\n    const totalTime = service._time.end.getTime() - service._time.start.getTime();\n    const endRes = service.setValue('cmi.core.session_time', service._time.convert(totalTime));\n\n    if (endRes.error) {\n      return endRes;\n    }\n\n    const exitRes = service.setValue('cmi.core.exit', service.STATUSES.exit.save);\n\n    if (exitRes.error) {\n      return exitRes;\n    }\n\n    return service.stop();\n  },\n};\n\nexport default {\n  service,\n}\n","import { service } from './runtime';\n\nwindow.__SCROWL_RUNTIME = service;"],"names":["$8f24f9e3aec8c792$export$6ed414b8d8bead88","init","finished","_time","start","undefined","end","convert","total","ZeroPad","val","pad","res","String","len","length","substr","i","totalMs","totalS","totalM","totalH","Math","floor","timespan","STATUSES","update","true","false","lesson","success","failed","done","active","viewed","unseen","exit","timeout","save","logout","isAvailable","API","error","message","getError","printError","errorId","LMSGetLastError","apiError","id","LMSGetErrorString","stack","LMSGetDiagnostic","console","JSON","stringify","data","_findAPI","source","retryCnt","parent","log","resFind","window","Date","LMSInitialize","LMSCommit","stop","saveRes","LMSFinish","setValue","elem","LMSSetValue","getValue","LMSGetValue","updateStatus","status","obj","prop","Object","prototype","hasOwnProperty","call","msg","keys","join","lessonStatus","setRes","totalTime","getTime","endRes","exitRes","__SCROWL_RUNTIME"],"version":3,"file":"scrowl.runtime.js.map"}