var e=require("electron");let n=[];const r=async r=>{const{events:i}=await(async()=>{const r=await e.ipcRenderer.invoke("events-all");return r.error||(n=r.data.events),{events:n}})();return i.filter((e=>!r||r===e.type)).map((e=>e.name))};e.contextBridge.exposeInMainWorld("electronAPI",{ipcRenderer:{async invoke(n,...i){if(-1!==(await r("invoke")).indexOf(n))return e.ipcRenderer.invoke(n,...i)},async on(n,i){-1!==(await r("send")).indexOf(n)&&e.ipcRenderer.on(n,i)},async send(n,...i){-1!==(await r("on")).indexOf(n)&&e.ipcRenderer.send(n,...i)},async removeAllListeners(n){-1!==(await r()).indexOf(n)&&e.ipcRenderer.removeAllListeners(n)}}});
//# sourceMappingURL=preload.js.map
