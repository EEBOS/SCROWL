{"mappings":"gNAIO,IAAIA,EAEX,GAA6B,gBAAzBC,QAAQC,IAAIC,SAA4B,CAC1C,MAAMC,EAAOH,QAAQC,IAAIG,MAAQ,KACjCL,EAAmBM,IACjB,MAAMC,EAAM,IAAIC,EAAAC,IAAI,oBAAoBL,KAExC,OADAG,EAAIG,SAAWJ,EACRC,EAAII,WAGbX,EAAmBM,GACV,UAAUM,EAAAC,GAAKC,QAAQC,UAAW,KAAMT,KCJnD,IAAIU,EAAmC,KAEvCC,EAAAC,QAAQC,GAAG,eAAeC,MAAOC,EAAOC,KACtC,MAAMC,EAAeC,GAAqB,aAAaA,IACvDC,QAAQC,IAAIH,EAAYD,IACxBD,EAAMM,MAAM,cAAeJ,EAAY,YAGzC,MAAMK,EACqB,gBAAzB3B,QAAQC,IAAIC,UAAyD,SAA3BF,QAAQC,IAAI2B,WAExD,GAAID,EAAe,CACjBE,IAEA,IACElB,EAAAmB,EAAA,CAAehB,UAAW,IAC1B,MAAOiB,GACPP,QAAQQ,MAAMD,IAIlB,MAMME,EAAed,UACfQ,SANGO,QAAQC,IAAI,CACjBxB,EAAAyB,EAAA,CAAiBA,EAAAC,yBAMSC,MAAMC,IAC9Bf,QAAQC,IAAI,qBAAqBc,QAIrC,MAAMC,EAAiBxB,EAAAyB,IAAIC,WACvB/B,EAAAC,GAAK+B,KAAK3C,QAAQ4C,cAAe,UACjCjC,EAAAC,GAAK+B,KAAK7B,UAAW,gBAMzBC,EAAa,IAAIC,EAAA6B,cAAc,CAC7BC,MAAM,EACNC,MAAO,KACPC,OAAQ,IACRC,KARmB,KAAIC,IAChBvC,EAAAC,GAAK+B,KAAKH,KAAmBU,GAO9BC,CAAa,YACnBC,eAAgB,CACdC,QAAS1C,EAAAC,GAAK+B,KAAK7B,UAAW,iBAIlCC,EAAWuC,QAAQvD,EAAgB,kBAEnCgB,EAAWG,GAAG,iBAAiB,KAC7B,IAAKH,EACH,MAAM,IAAIwC,MAAM,+BAEdvD,QAAQC,IAAIuD,gBACdzC,EAAW0C,WAEX1C,EAAW+B,UAIf/B,EAAWG,GAAG,UAAU,KACtBH,EAAa,QAIfA,EAAW2C,YAAYC,sBAAqBC,IAC1C5C,EAAA6C,MAAMC,aAAaF,EAAMtD,KAClB,CAAEyD,OAAQ,YAQrB/C,EAAAyB,IAAIvB,GAAG,qBAAqB,KAGD,WAArBlB,QAAQgE,UACVhD,EAAAyB,IAAIwB,UAIRjD,EAAAyB,IACGyB,YACA5B,MAAK,KACJL,IACAjB,EAAAyB,IAAIvB,GAAG,YAAY,KAGE,OAAfH,GAAqBkB,UAG5BkC,MAAM3C,QAAQC","sources":["apps/course-authoring/src/main/util.ts","apps/course-authoring/src/main/index.ts"],"sourcesContent":["/* eslint import/prefer-default-export: off, import/no-mutable-exports: off */\nimport { URL } from 'url';\nimport path from 'path';\n\nexport let resolveHtmlPath: (htmlFileName: string) => string;\n\nif (process.env.NODE_ENV === 'development') {\n  const port = process.env.PORT || 1234;\n  resolveHtmlPath = (htmlFileName: string) => {\n    const url = new URL(`http://localhost:${port}`);\n    url.pathname = htmlFileName;\n    return url.href;\n  };\n} else {\n  resolveHtmlPath = (htmlFileName: string) => {\n    return `file://${path.resolve(__dirname, './', htmlFileName)}`;\n  };\n}","/**\n * This module executes inside of electron's main process. You can start\n * electron renderer process from here and communicate with the other processes\n * through IPC.\n */\nimport path from 'path'\nimport { app, BrowserWindow, shell, ipcMain } from 'electron'\nimport electronReload from 'electron-reload'\nimport installExtension, { REACT_DEVELOPER_TOOLS } from 'electron-devtools-installer'\nimport { resolveHtmlPath } from './util'\n\nlet mainWindow: BrowserWindow | null = null\n\nipcMain.on('ipc-example', async (event, arg) => {\n  const msgTemplate = (pingPong: string) => `IPC test: ${pingPong}`\n  console.log(msgTemplate(arg))\n  event.reply('ipc-example', msgTemplate('pong'))\n})\n\nconst isDevelopment =\n  process.env.NODE_ENV === 'development' || process.env.DEBUG_PROD === 'true'\n\nif (isDevelopment) {\n  require('electron-debug')()\n\n  try {\n    electronReload(__dirname, {})\n  } catch (err) {\n    console.error(err)\n  }\n}\n\nconst installExtensions = () => {\n  return Promise.all([\n    installExtension(REACT_DEVELOPER_TOOLS),\n  ])\n}\n\nconst createWindow = async () => {\n  if (isDevelopment) {\n    await installExtensions().then((installs) => {\n      console.log(`Added Extensions: ${installs}`)\n    })\n  }\n\n  const RESOURCES_PATH = app.isPackaged\n    ? path.join(process.resourcesPath, 'assets')\n    : path.join(__dirname, '../../assets')\n\n  const getAssetPath = (...paths: string[]): string => {\n    return path.join(RESOURCES_PATH, ...paths)\n  }\n  \n  mainWindow = new BrowserWindow({\n    show: false,\n    width: 1024,\n    height: 728,\n    icon: getAssetPath('icon.png'),\n    webPreferences: {\n      preload: path.join(__dirname, 'preload.js'),\n    },\n  })\n  \n  mainWindow.loadURL(resolveHtmlPath('renderer.html'))\n\n  mainWindow.on('ready-to-show', () => {\n    if (!mainWindow) {\n      throw new Error('\"mainWindow\" is not defined')\n    }\n    if (process.env.START_MINIMIZED) {\n      mainWindow.minimize()\n    } else {\n      mainWindow.show()\n    }\n  })\n\n  mainWindow.on('closed', () => {\n    mainWindow = null\n  })\n\n  // Open urls in the user's browser\n  mainWindow.webContents.setWindowOpenHandler(edata => {\n    shell.openExternal(edata.url)\n    return { action: 'deny' }\n  })\n}\n\n/**\n * Add event listeners...\n */\n\napp.on('window-all-closed', () => {\n  // Respect the OSX convention of having the application in memory even\n  // after all windows have been closed\n  if (process.platform !== 'darwin') {\n    app.quit()\n  }\n})\n\napp\n  .whenReady()\n  .then(() => {\n    createWindow()\n    app.on('activate', () => {\n      // On macOS it's common to re-create a window in the app when the\n      // dock icon is clicked and there are no other windows open.\n      if (mainWindow === null) createWindow()\n    })\n  })\n  .catch(console.log)\n"],"names":["$2240a9306c32a1fd$export$c425ec604693c083","process","env","NODE_ENV","port","PORT","htmlFileName","url","$bzP7x$url","URL","pathname","href","$parcel$interopDefault","$bzP7x$path","resolve","__dirname","$5a2cb2caae04678e$var$mainWindow","$bzP7x$electron","ipcMain","on","async","event","arg","msgTemplate","pingPong","console","log","reply","$5a2cb2caae04678e$var$isDevelopment","DEBUG_PROD","$bzP7x$electrondebug","$bzP7x$electronreload","err","error","$5a2cb2caae04678e$var$createWindow","Promise","all","$bzP7x$electrondevtoolsinstaller","REACT_DEVELOPER_TOOLS","then","installs","RESOURCES_PATH","app","isPackaged","join","resourcesPath","BrowserWindow","show","width","height","icon","paths","getAssetPath","webPreferences","preload","loadURL","Error","START_MINIMIZED","minimize","webContents","setWindowOpenHandler","edata","shell","openExternal","action","platform","quit","whenReady","catch"],"version":3,"file":"main.js.map"}