{"mappings":"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","sources":["apps/course-authoring/src/main/util.ts","apps/course-authoring/src/main/services/file-system/archiver.ts","apps/course-authoring/src/main/services/file-system/dialog.ts","apps/course-authoring/src/main/services/file-system/files.ts","apps/course-authoring/src/main/services/templater/index.ts","apps/course-authoring/src/main/services/exporter/index.ts","apps/course-authoring/src/main/services/internal-storage/database.tsx","apps/course-authoring/src/main/services/internal-storage/handlers/preferences/index.tsx","apps/course-authoring/src/main/services/internal-storage/models/preferences.tsx","apps/course-authoring/src/main/services/internal-storage/index.tsx","apps/course-authoring/src/main/models/project/project-model.ts","apps/course-authoring/src/main/models/index.ts","apps/course-authoring/src/main/index.ts"],"sourcesContent":["/* eslint import/prefer-default-export: off, import/no-mutable-exports: off */\nimport { URL } from 'url';\nimport path from 'path';\n\nexport let resolveHtmlPath: (htmlFileName: string) => string;\n\nif (process.env.NODE_ENV === 'development') {\n  const port = process.env.PORT || 1234;\n  resolveHtmlPath = (htmlFileName: string) => {\n    const url = new URL(`http://localhost:${port}`);\n    url.pathname = htmlFileName;\n    return url.href;\n  };\n} else {\n  resolveHtmlPath = (htmlFileName: string) => {\n    return `file://${path.join(__dirname, '../../', 'dist', htmlFileName)}`;\n  };\n}\n","import AdmZip from 'adm-zip';\nimport { SaveFileData } from './types';\n\nexport const archive = (source: string, dest: string): SaveFileData => {\n  try {\n    const zip = new AdmZip();\n\n    zip.addLocalFolder(source);\n\n    zip.writeZip(dest);\n\n    return {\n      error: false,\n      filePath: dest,\n    };\n  } catch (err) {\n    return {\n      error: true,\n      message: err,\n    };\n  }\n};\n\nexport default {\n  archive,\n};\n","import { dialog, OpenDialogOptions, SaveDialogOptions } from 'electron';\nimport { OpenFileData, SaveFileData, FileFilters, AllowedFiles } from './types';\n\nexport const MEDIA_TYPES: FileFilters = {\n  image: { name: 'Image', extensions: ['jpg', 'jpeg', 'png'] },\n  video: { name: 'Video', extensions: ['mp4', 'mkv', 'avi'] },\n  project: { name: 'Scrowl Project', extensions: ['scrowl'] },\n};\n\nexport const getDialogMediaFilters = (filters: Array<AllowedFiles>) => {\n  return filters.map(filter => MEDIA_TYPES[filter]);\n};\n\nexport const dialogOpen = (options: OpenDialogOptions) => {\n  return new Promise<OpenFileData>((resolve, reject) => {\n    dialog\n      .showOpenDialog(options)\n      .then(({ canceled, filePaths }: OpenFileData) => {\n        resolve({\n          error: false,\n          canceled,\n          filePaths,\n        });\n      })\n      .catch(err => {\n        reject({\n          filePaths: [],\n          canceled: false,\n          error: true,\n          message: err,\n        });\n      });\n  });\n};\n\nexport const dialogSave = (options: SaveDialogOptions) => {\n  return new Promise<SaveFileData>((resolve, reject) => {\n    dialog\n      .showSaveDialog(options)\n      .then(({ canceled, filePath }: SaveFileData) => {\n        resolve({\n          error: false,\n          canceled,\n          filePath,\n        });\n      })\n      .catch(err => {\n        reject({\n          filePath: '',\n          canceled: false,\n          error: true,\n          message: err,\n        });\n      });\n  });\n};\n\nexport default {\n  dialogOpen,\n  dialogSave,\n};\n","import fs from 'fs-extra';\nimport os from 'os';\nimport path from 'path';\nimport { FileData } from './types';\n\nconst normalize = (pathName: string) => {\n  return path.normalize(pathName);\n};\n\nconst isJSON = (name: string) => {\n  return /.json$/.test(name) || /.project$/.test(name);\n};\n\nexport const join = (...paths: Array<string>) => {\n  return path.join.apply(null, paths);\n};\n\nexport const ext = (pathName: string) => {\n  return path.extname(pathName);\n};\n\nexport const dirExistsSync = (pathName: string) => {\n  try {\n    return {\n      error: false,\n      exists: fs.existsSync(normalize(pathName)),\n    };\n  } catch (err) {\n    return {\n      error: true,\n      exists: false,\n      message: err,\n    };\n  }\n};\n\nexport const dirTempSync = (prefix: string) => {\n  let tmpDir;\n\n  try {\n    tmpDir = fs.mkdtempSync(\n      path.join(os.tmpdir(), `${prefix ? `${prefix}_` : ''}`)\n    );\n\n    return {\n      error: false,\n      pathName: tmpDir,\n    };\n  } catch (err) {\n    return {\n      error: true,\n      message: err,\n    };\n  }\n};\n\nexport const fileExistsSync = (pathName: string) => {\n  try {\n    return {\n      error: false,\n      exists: fs.pathExistsSync(pathName),\n    };\n  } catch (err) {\n    return {\n      error: true,\n      exists: false,\n      message: err,\n    };\n  }\n};\n\nexport const fileReadSync = (\n  pathName: string,\n  media: BufferEncoding = 'utf8'\n) => {\n  const exists = fileExistsSync(pathName);\n\n  if (exists.error) {\n    return {\n      error: true,\n      message: exists.message,\n    };\n  }\n\n  if (media === undefined) {\n    media = 'utf8';\n  }\n\n  const filename = normalize(pathName);\n\n  try {\n    let contents;\n    const file = fs.readFileSync(filename, { encoding: media, flag: 'r' });\n\n    if (isJSON(filename)) {\n      contents = JSON.parse(file);\n    } else {\n      contents = file;\n    }\n\n    return {\n      error: false,\n      contents,\n    };\n  } catch (err) {\n    return {\n      error: true,\n      message: err,\n    };\n  }\n};\n\nexport const fileWriteSync = (\n  pathName: string,\n  contents: unknown\n): FileData => {\n  const filename = normalize(pathName);\n\n  if (!contents) {\n    return {\n      error: true,\n      filename,\n      message: 'no contents to write',\n    };\n  }\n\n  try {\n    if (isJSON(pathName)) {\n      if (typeof contents !== 'string') {\n        contents = JSON.stringify(contents, null, 2);\n      } else {\n        contents = JSON.stringify(JSON.parse(contents), null, 2);\n      }\n    }\n\n    fs.outputFileSync(filename, contents);\n\n    return {\n      error: false,\n      filename,\n    };\n  } catch (err) {\n    return {\n      error: true,\n      filename,\n      message: err,\n    };\n  }\n};\n\nexport const fileCopySync = (source: string, dest: string): FileData => {\n  const sourcePath = normalize(source);\n  const destPath = normalize(dest);\n\n  try {\n    fs.copySync(sourcePath, destPath);\n\n    return {\n      error: false,\n      filename: destPath,\n    };\n  } catch (err) {\n    return {\n      error: true,\n      message: err,\n    };\n  }\n};\n\nexport const fileTempSync = (source: string, dest: string): FileData => {\n  const destFile = `${dest}/${path.basename(source)}`;\n\n  return fileCopySync(source, destFile);\n};\n\nexport default {\n  join,\n  ext,\n  dirExistsSync,\n  dirTempSync,\n  fileExistsSync,\n  fileReadSync,\n  fileWriteSync,\n  fileCopySync,\n  fileTempSync,\n};\n","import engine from 'handlebars';\nimport { TemplateData, TemplateResult } from '../exporter/types';\n\nengine.registerHelper('raw', options => {\n  return options.fn();\n});\n\nexport const compile = (contents: string, data: TemplateData): TemplateResult => {\n  try {\n    return {\n      error: false,\n      data: engine.compile(contents)(data),\n    };\n  } catch (err: any) {\n    return {\n      error: true,\n      message: err,\n    }\n  }\n};\n\nexport default {\n  compile,\n};\n","import path from 'path';\nimport fs from 'fs-extra';\nimport { ipcMain } from 'electron';\nimport packager from 'scorm-packager';\nimport { ProjectConfig } from '@scrowl/player/src/lib';\nimport { PathingProps, PathingDirKey } from './types';\nimport { fileReadSync, fileWriteSync } from '../file-system';\nimport { compile } from '../templater';\n\nconst pathing: PathingProps = {\n  files: {\n    template: {\n      source: path.join(__dirname, 'course/templates/index.hbs'),\n      dest: path.join(__dirname, 'course/package/content/index.html'),\n    },\n  },\n  dirs: {\n    source: path.join(__dirname, 'course/package'),\n    out: path.join(__dirname, 'course/dist'),\n  }\n};\n\nconst setPathingDirs = () => {\n  let dest = '' as PathingDirKey;\n\n  for (dest in pathing.dirs) {\n    if (!fs.existsSync(pathing.dirs[dest])) {\n      fs.mkdirSync(pathing.dirs[dest]);\n    }\n  }\n};\n\nexport const pack = (ev: Electron.IpcMainInvokeEvent, packOptions: {\n  title?: string,\n  manifest?: ProjectConfig\n}) => {\n  return new Promise((resolve, reject) => {\n    const config = {\n      version: '1.2',\n      organization: 'OSG',\n      language: 'en-US',\n      startingPage: 'content/index.html',\n      source: pathing.dirs.source,\n      package: {\n        version: '0.0.1',\n        zip: true,\n        outputFolder: pathing.dirs.out,\n      },\n    };\n    const courseTemplate = fileReadSync(pathing.files.template.source);\n\n    if (courseTemplate.error) {\n      reject(courseTemplate);\n      return;\n    }\n\n    if (!packOptions.manifest) {\n      reject(\n        {\n          error: true,\n          message: 'Missing project manifest'\n        }\n      );\n      return;\n    }\n\n    const courseData = {\n      title: packOptions.title ? packOptions.title : '',\n      manifest: JSON.stringify(packOptions.manifest),\n    }\n    const courseContents = compile(courseTemplate.contents, courseData);\n\n    if (courseContents.error) {\n      reject(courseContents);\n      return;\n    }\n\n    const writeRes = fileWriteSync(pathing.files.template.dest, courseContents.data);\n\n    if (writeRes.error) {\n      reject(writeRes);\n      return;\n    }\n\n    setPathingDirs();\n    packager(config, (msg: string) => {\n      resolve({\n        error: false,\n        message: msg,\n      });\n    });\n  });\n};\n\nexport const EVENTS = {\n  package: 'package-course',\n};\n\nexport const init = () => {\n  ipcMain.handle(EVENTS.package, pack);\n};\n\nexport default {\n  EVENTS,\n  init,\n  pack,\n};\n","import knex from 'knex';\nimport path from 'path';\n\nconst database = knex({\n  client: 'sqlite3',\n  connection: {\n    filename: path.join(__dirname, './scrowl.sqlite'),\n  },\n  useNullAsDefault: true,\n});\n\nexport default database;\n","import database from '../../database';\nimport { Preferences } from './index.types';\n\nconst table = 'preferences';\n\nconst getPreferencesList = async () => {\n  const data = await database.select().from(table);\n  return data[0];\n};\n\nconst getPreference = async (column: keyof Preferences) => {\n  const data = await database.select(column).from(table);\n  return data[0];\n};\n\nconst setPreferences = (args: Preferences) => {\n  return database(table).update(args);\n};\n\nexport default {\n  getPreferencesList,\n  getPreference,\n  setPreferences,\n};\n","import { ipcMain } from 'electron';\nimport { default as PreferencesHandler } from '../handlers/preferences';\nimport { Preferences } from '../handlers/preferences/index.types';\n\nexport const events = {\n  getPreferencesList: 'get-preferences-list',\n  getPreference: 'get-preference',\n  setPreferences: 'set-preferences',\n};\n\nexport const getPreferencesList = () => {\n  return PreferencesHandler.getPreferencesList();\n};\n\nexport const getPreference = (\n  event: Electron.IpcMainInvokeEvent,\n  args: keyof Preferences\n) => {\n  return PreferencesHandler.getPreference(args);\n};\n\nexport const setPreferences = (\n  event: Electron.IpcMainInvokeEvent,\n  args: Preferences\n) => {\n  return PreferencesHandler.setPreferences(args);\n};\n\nexport const init = () => {\n  ipcMain.handle(events.getPreferencesList, getPreferencesList);\n  ipcMain.handle(events.getPreference, (event, args) =>\n    getPreference(event, args)\n  );\n  ipcMain.handle(events.setPreferences, (event, args) =>\n    setPreferences(event, args)\n  );\n};\n\nexport default {\n  events,\n  getPreferencesList,\n  getPreference,\n  setPreferences,\n  init,\n};\n","import * as Preferences from './models/preferences';\n\nexport const preferencesEvents = Preferences.events;\nexport const preferencesInit = Preferences.init;\n\nexport default { preferencesEvents, preferencesInit };\n","import { IpcMainInvokeEvent } from 'electron';\nimport { ModelEventProps } from '../index';\nimport {\n  dialogSave,\n  archive,\n  dirTempSync,\n  fileWriteSync,\n  fileTempSync,\n  AllowedFiles,\n  getDialogMediaFilters,\n  dialogOpen,\n  FileData,\n} from '../../services/file-system/index';\n\nexport const create = function (event: IpcMainInvokeEvent, project: unknown) {\n  const dirPrefix = 'scrowl';\n  const projectFileName = 'scrowl.project';\n  const tempDir = dirTempSync(dirPrefix);\n\n  if (tempDir.error) {\n    return tempDir;\n  }\n\n  const filename = `${tempDir.pathName}/${projectFileName}`;\n  return fileWriteSync(filename, project);\n};\n\nconst write = function (source: string, filename: string): FileData {\n  if (!source) {\n    return {\n      error: true,\n      message: 'project requires a source',\n    };\n  }\n\n  if (!filename) {\n    return {\n      error: true,\n      message: 'project requires a filename',\n    };\n  }\n\n  return archive(source, filename);\n};\n\nexport const save = async function (\n  event: IpcMainInvokeEvent,\n  projectTempPath: string,\n  projectPath: string\n) {\n  const dialogOptions = {\n    title: 'Scrowl - Save Project',\n    filters: [\n      {\n        name: 'Scrowl Project',\n        extensions: ['scrowl'],\n      },\n    ],\n  };\n\n  if (!projectPath) {\n    const dialogResult = await dialogSave(dialogOptions);\n\n    if (dialogResult.error) {\n      return dialogResult;\n    }\n\n    if (dialogResult.filePath) {\n      projectPath = dialogResult.filePath;\n    }\n  }\n\n  return write(projectTempPath, projectPath);\n};\n\nexport const importFile = async function (\n  event: IpcMainInvokeEvent,\n  fileTypes: Array<AllowedFiles>,\n  projectTempPath: string\n) {\n  const filters = getDialogMediaFilters(fileTypes);\n\n  if (!filters.length) {\n    return {\n      error: true,\n      message: 'valid file types need to be declared for importing',\n    };\n  }\n\n  const dialogOptions = {\n    title: 'Scrowl - Import File',\n    filters,\n  };\n  const dialogResult = await dialogOpen(dialogOptions);\n\n  if (dialogResult.error) {\n    return dialogResult;\n  }\n\n  if (!dialogResult.filePaths.length) {\n    return {\n      error: true,\n      message: 'no files found/selected',\n    };\n  }\n\n  return fileTempSync(dialogResult.filePaths[0], projectTempPath);\n};\n\nexport const EVENTS: ModelEventProps[] = [\n  {\n    name: 'project-create',\n    fn: create,\n  },\n  {\n    name: 'project-save',\n    fn: save,\n  },\n  {\n    name: 'project-import',\n    fn: importFile,\n  },\n];\n\nexport default {\n  EVENTS,\n  create,\n  save,\n};\n","import { ipcMain, IpcMainInvokeEvent } from 'electron';\nimport * as projects from './project/project-model';\n\nexport type ModelEventProps = {\n  name: string;\n  fn: HandleListenerProps;\n};\n\ntype HandleListenerProps = (event: IpcMainInvokeEvent, ...args: any[]) => void;\n\ninterface ModelProps {\n  EVENTS: ModelEventProps[];\n  [key: string]: unknown;\n}\n\nconst models = [projects];\n\nconst registerEvents = (model: ModelProps) => {\n  model.EVENTS.forEach((ev: ModelEventProps) => {\n    if (ev.fn && typeof ev.fn === 'function') {\n      ipcMain.handle(ev.name, ev.fn);\n    }\n  });\n};\n\nexport const init = () => {\n  models.forEach(model => {\n    if (model.EVENTS) {\n      registerEvents(model);\n    }\n  });\n};\n\nexport const getEvents = () => {\n  const getEventNames = (ev: ModelEventProps) => {\n    return ev.name;\n  };\n\n  return models\n    .map(model => {\n      return model.EVENTS ? model.EVENTS.map(getEventNames) : [];\n    })\n    .flat();\n};\n\nexport default {\n  init,\n  getEvents,\n};\n","/**\n * This module executes inside of electron's main process. You can start\n * electron renderer process from here and communicate with the other processes\n * through IPC.\n */\nimport path from 'path';\nimport {\n  app,\n  BrowserWindow,\n  shell,\n  BrowserWindowConstructorOptions,\n  protocol,\n} from 'electron';\nimport electronDebug from 'electron-debug';\nimport installExtension, {\n  REACT_DEVELOPER_TOOLS,\n} from 'electron-devtools-installer';\nimport { resolveHtmlPath } from './util';\nimport { init as exporterInit } from './services/exporter';\nimport { preferencesInit } from './services/internal-storage';\nimport { init as modelsInit } from './models/index';\n\nconst __rootdir = path.join(__dirname, '../../');\n\nlet mainWindow: BrowserWindow | null = null;\n\nconst isDevelopment =\n  process.env.NODE_ENV === 'development' || process.env.DEBUG_PROD === 'true';\n\nconst installExtensions = () => {\n  return Promise.all([installExtension(REACT_DEVELOPER_TOOLS)]);\n};\n\nconst createWindow = async () => {\n  if (isDevelopment) {\n    electronDebug();\n    const installResult = await installExtensions();\n\n    console.log(`\\n\\nAdded Extensions: ${installResult}\\n\\n`);\n  }\n\n  const RESOURCES_PATH = app.isPackaged\n    ? path.join(process.resourcesPath, 'assets')\n    : path.join(__rootdir, 'dist', 'assets');\n\n  const getAssetPath = (...paths: string[]): string => {\n    return path.join(RESOURCES_PATH, ...paths);\n  };\n\n  function getBrowserWindow(preloadPath: string) {\n    const browserWindowConfig: BrowserWindowConstructorOptions = {\n      titleBarStyle: 'hidden',\n      show: false,\n      width: 1024,\n      minWidth: 1024,\n      height: 728,\n      icon: getAssetPath('icon.png'),\n      webPreferences: {\n        preload: preloadPath,\n      },\n    };\n\n    try {\n      return new BrowserWindow(browserWindowConfig);\n    } catch (error) {\n      console.error(preloadPath, '\\n', error);\n      return null;\n    }\n  }\n\n  mainWindow = getBrowserWindow(path.join(__rootdir, 'dist', 'preload.js'));\n\n  if (!mainWindow) {\n    throw 'Unable to create Browser Window';\n  }\n\n  exporterInit();\n  preferencesInit();\n  modelsInit();\n\n  mainWindow.loadURL(resolveHtmlPath('renderer.html'));\n\n  mainWindow.on('ready-to-show', () => {\n    if (!mainWindow) {\n      throw new Error('\"mainWindow\" is not defined');\n    }\n    if (process.env.START_MINIMIZED) {\n      mainWindow.minimize();\n    } else {\n      mainWindow.show();\n      mainWindow.webContents.openDevTools({ mode: 'detach' });\n    }\n  });\n\n  mainWindow.on('closed', () => {\n    mainWindow = null;\n  });\n\n  // Open urls in the user's browser\n  mainWindow.webContents.setWindowOpenHandler(edata => {\n    shell.openExternal(edata.url);\n    return { action: 'deny' };\n  });\n};\n\n/**\n * Register a custom protocol to load files from local disk\n * Using the protocol will avoid the Chromium security error: \" Not allowed to load local resource\"\n * due to the webPreferences: { webSecurity: true } when creating the window.\n * More info: https://github.com/electron/electron/issues/23757#issuecomment-640146333\n * Do not disable websecurity: https://www.electronjs.org/docs/latest/tutorial/security#6-do-not-disable-websecurity\n *\n * Using the custom protocol:\n * <img src='scrowl-file:///User/Images/img.jpeg' />\n */\nconst registerScrowlFileProtocol = () => {\n  const protocolName = 'scrowl-file';\n\n  protocol.registerFileProtocol(protocolName, (request, callback) => {\n    const url = request.url.replace(`${protocolName}://`, '');\n    try {\n      return callback(decodeURIComponent(url));\n    } catch (error) {\n      console.error(error);\n    }\n  });\n};\n\n/**\n * Add event listeners...\n */\n\napp.on('window-all-closed', () => {\n  // Respect the OSX convention of having the application in memory even\n  // after all windows have been closed\n  if (process.platform !== 'darwin') {\n    app.quit();\n  }\n});\n\napp\n  .whenReady()\n  .then(() => {\n    registerScrowlFileProtocol();\n    createWindow();\n    app.on('activate', () => {\n      // On macOS it's common to re-create a window in the app when the\n      // dock icon is clicked and there are no other windows open.\n      if (mainWindow === null) createWindow();\n    });\n  })\n  .catch(console.log);\n"],"names":["$2240a9306c32a1fd$export$c425ec604693c083","process","env","NODE_ENV","port","PORT","htmlFileName","url","$bzP7x$url","URL","pathname","href","$parcel$interopDefault","$bzP7x$path","join","$2240a9306c32a1fd$var$__dirname","$f538c121c8411ad9$export$a95942469f0fbfa1","source","dest","zip","$bzP7x$admzip","addLocalFolder","writeZip","error","filePath","err","message","$b4730b00f07e60e6$export$86d3e91ec655a54c","image","name","extensions","video","project","$b4730b00f07e60e6$export$a85fefe9f9398bfb","options","Promise","resolve","reject","$bzP7x$electron","dialog","showOpenDialog","then","canceled","filePaths","catch","$b4730b00f07e60e6$export$99bd1e12f062b027","showSaveDialog","$0688521469908ca6$var$normalize","pathName","normalize","$0688521469908ca6$var$isJSON","test","$0688521469908ca6$export$a0f3b6799fdd398e","prefix","tmpDir","$bzP7x$fsextra","mkdtempSync","$bzP7x$os","tmpdir","$0688521469908ca6$export$65c38f5b4a93b225","exists","pathExistsSync","$0688521469908ca6$export$d17fe30b9b9e39cb","media","undefined","filename","contents","file","readFileSync","encoding","flag","JSON","parse","$0688521469908ca6$export$5130d5f6c93c72f7","stringify","outputFileSync","$0688521469908ca6$export$83eb0cf7b57d2792","sourcePath","destPath","copySync","$0688521469908ca6$export$9cc06fd6c62f44ff","destFile","basename","$bzP7x$handlebars","registerHelper","fn","$5f30f43ce1b09ee8$export$ef7acd7185315e22","data","compile","$a3981526a2cac1f8$var$pathing","files","template","$a3981526a2cac1f8$var$__dirname","dirs","out","$a3981526a2cac1f8$export$2a703dbb0cb35339","ev","packOptions","config","version","organization","language","startingPage","package","outputFolder","courseTemplate","manifest","courseData","title","courseContents","writeRes","existsSync","mkdirSync","$a3981526a2cac1f8$var$setPathingDirs","$bzP7x$scormpackager","msg","$a3981526a2cac1f8$export$fa3d5b535a2458a1","$a3981526a2cac1f8$export$2cd8252107eb640b","ipcMain","handle","$09fe1bcaf772acc2$export$2e2bcd8739ae039","$bzP7x$knex","client","connection","$09fe1bcaf772acc2$var$__dirname","useNullAsDefault","$64f944dc17ffd8af$export$2e2bcd8739ae039","async","select","from","column","args","update","$e5bcd470c1e05699$export$4bf9923669ad6c63","getPreferencesList","getPreference","setPreferences","$e5bcd470c1e05699$export$a948945d4c279459","$e5bcd470c1e05699$export$5fa261395d19a143","event","$e5bcd470c1e05699$export$1cf16dac95f2c31c","$e5bcd470c1e05699$export$2cd8252107eb640b","$a33e2ebf7a487d29$export$163950f465ea9f37","$b0efd352bab00d6f$export$185802fd694ee1f5","tempDir","$b0efd352bab00d6f$export$a1544dad697b423d","projectTempPath","projectPath","dialogOptions","filters","dialogResult","$b0efd352bab00d6f$export$4da7403fdb9cb456","fileTypes","map","filter","$b4730b00f07e60e6$export$bf923d45a46235c4","length","$b0efd352bab00d6f$export$fa3d5b535a2458a1","$b0efd352bab00d6f$export$2e2bcd8739ae039","$10d70a7411a81276$var$models","$b0efd352bab00d6f$exports","$10d70a7411a81276$export$2cd8252107eb640b","forEach","model","EVENTS","$10d70a7411a81276$var$registerEvents","$5a2cb2caae04678e$var$__rootdir","$5a2cb2caae04678e$var$__dirname","$5a2cb2caae04678e$var$mainWindow","$5a2cb2caae04678e$var$isDevelopment","DEBUG_PROD","$5a2cb2caae04678e$var$createWindow","$bzP7x$electrondebug","installResult","all","$bzP7x$electrondevtoolsinstaller","REACT_DEVELOPER_TOOLS","console","log","RESOURCES_PATH","app","isPackaged","resourcesPath","getAssetPath","paths","preloadPath","browserWindowConfig","titleBarStyle","show","width","minWidth","height","icon","webPreferences","preload","BrowserWindow","getBrowserWindow","loadURL","on","Error","START_MINIMIZED","minimize","webContents","openDevTools","mode","setWindowOpenHandler","edata","shell","openExternal","action","platform","quit","whenReady","protocolName","protocol","registerFileProtocol","request","callback","replace","decodeURIComponent","$5a2cb2caae04678e$var$registerScrowlFileProtocol"],"version":3,"file":"main.js.map"}