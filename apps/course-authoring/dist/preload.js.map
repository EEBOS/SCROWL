{"mappings":"0BAGA,IAAIA,EAAkC,GAEtC,MAcMC,EAAiBC,MAAOC,IAC5B,MApBFC,OAoBUA,QAfcF,WAGtB,MAAMG,QAAeC,EAAAC,YAAYC,OAAO,cAMxC,OAJKH,EAAOI,QACVT,EAAYK,EAAOK,KAAKN,QAGnB,CACLA,OAAQJ,IAKeW,GAEzB,OAAOP,EACJQ,QAAQC,IACCV,GAAQA,IAASU,EAAMV,OAEhCW,KAAKD,GACGA,EAAME,QAInBT,EAAAU,cAAcC,kBAAkB,cAAe,CAC7CV,YAAa,CACXL,aAAagB,KAAqBC,GAIhC,IAAsC,WAFZlB,EAAe,WAEzBmB,QAAQF,GACtB,OAAOZ,EAAAC,YAAYC,OAAOU,KAAaC,IAG3CjB,SAASgB,EAAkBG,IAIa,WAFZpB,EAAe,SAEzBmB,QAAQF,IACtBZ,EAAAC,YAAYe,GAAGJ,EAAUG,IAG7BnB,WAAWgB,KAAqBC,IAIQ,WAFZlB,EAAe,OAEzBmB,QAAQF,IACtBZ,EAAAC,YAAYgB,KAAKL,KAAaC,IAGlCjB,yBAAyBgB,IAKe,WAFZjB,KAEVmB,QAAQF,IACtBZ,EAAAC,YAAYiB,mBAAmBN","sources":["apps/course-authoring/src/main/preload.ts"],"sourcesContent":["import { contextBridge, ipcRenderer } from 'electron';\nimport { RegisterEventType, RegisterEvent } from './services/requester';\n\nlet eventList: Array<RegisterEvent> = [];\n\nconst updateEventList = async (): Promise<{\n  events: RegisterEvent[];\n}> => {\n  const result = await ipcRenderer.invoke('events-all');\n\n  if (!result.error) {\n    eventList = result.data.events;\n  }\n\n  return {\n    events: eventList,\n  };\n};\n\nconst getValidEvents = async (type?: RegisterEventType) => {\n  const { events } = await updateEventList();\n\n  return events\n    .filter((event: RegisterEvent) => {\n      return !type || type === event.type;\n    })\n    .map((event: RegisterEvent) => {\n      return event.name;\n    });\n};\n\ncontextBridge.exposeInMainWorld('electronAPI', {\n  ipcRenderer: {\n    async invoke(endpoint: string, ...args: unknown[]) {\n      // sends an 'invoke' event to the backend\n      const validEvents = await getValidEvents('invoke');\n\n      if (validEvents.indexOf(endpoint) !== -1) {\n        return ipcRenderer.invoke(endpoint, ...args);\n      }\n    },\n    async on(endpoint: string, listener: (...args: unknown[]) => void) {\n      // listens to a 'send' event from the backend\n      const validEvents = await getValidEvents('send');\n\n      if (validEvents.indexOf(endpoint) !== -1) {\n        ipcRenderer.on(endpoint, listener);\n      }\n    },\n    async send(endpoint: string, ...args: unknown[]) {\n      // sends an 'on' event to the backend\n      const validEvents = await getValidEvents('on');\n\n      if (validEvents.indexOf(endpoint) !== -1) {\n        ipcRenderer.send(endpoint, ...args);\n      }\n    },\n    async removeAllListeners(endpoint: string) {\n      // removes all callbacks from an endpoint\n      // DANGREROUS //\n      const validEvents = await getValidEvents();\n\n      if (validEvents.indexOf(endpoint) !== -1) {\n        ipcRenderer.removeAllListeners(endpoint);\n      }\n    },\n  },\n});\n"],"names":["$84fff551af772094$var$eventList","$84fff551af772094$var$getValidEvents","async","type","events","result","$jKToa$electron","ipcRenderer","invoke","error","data","$84fff551af772094$var$updateEventList","filter","event","map","name","contextBridge","exposeInMainWorld","endpoint","args","indexOf","listener","on","send","removeAllListeners"],"version":3,"file":"preload.js.map"}