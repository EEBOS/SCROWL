name: Integration workflow
on:
  pull_request:
    types: [open, edited, reopened, synchronize]
  workflow_dispatch: # so we can run this workflow manually as well

jobs:
  lint-course-authoring:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v1
        with:
          node-version: 16.13.2 # matching Elctron's version of node

      - name: Get Yarn Cache
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Lerna
        run: yarn add lerna -W -D --network-timeout 100000

      - name: Install Dependencies
        run: yarn run lerna bootstrap

      - name: Lint
        run: yarn run lint:check:course

  test-unit-course-authoring:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest]
    steps:
      - uses: actions/checkout@v2

      - name: Setup Node
        uses: actions/setup-node@v2
        with:
          node-version: 16.13.2 # matching Elctron's version of node

      - name: Get Yarn Cache
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"
      - uses: actions/cache@v1
        id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-

      - name: Install Lerna
        run: yarn add lerna -W -D --network-timeout 100000

      - name: Install Dependencies
        run: yarn run lerna bootstrap

      - name: Test
        run: yarn run test:unit:tool:course

  test-e2e-course-authoring:
      runs-on: ${{ matrix.os }}
      strategy:
        matrix:
          os: [macos-latest]
      steps:
        - uses: actions/checkout@v2

        - name: Setup Node
          uses: actions/setup-node@v2
          with:
            node-version: 16.13.2 # matching Elctron's version of node

        - name: Get Yarn Cache
          id: yarn-cache-dir-path
          run: echo "::set-output name=dir::$(yarn cache dir)"
        - uses: actions/cache@v1
          id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
          with:
            path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
            key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
            restore-keys: |
              ${{ runner.os }}-yarn-

        - name: Install Lerna
          run: yarn add lerna -W -D --network-timeout 100000

        - name: Install Dependencies
          run: yarn run lerna bootstrap

        - name: Install Playwright Dependencies
          run: npx playwright install --with-deps chromium

        - name: Upload Test Results
          if: always()
          uses: actions/upload/artifact@v2
          with:
            name: playwright-report
            path: playwright-report

        - name: Test
          run: yarn run test:e2e:tool:course
